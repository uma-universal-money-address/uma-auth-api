/**
* UMA Auth API
* This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
*
* The version of the OpenAPI document: 0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package me.uma.auth

import io.ktor.resources.*
import kotlinx.serialization.*
import me.uma.auth.models.*

object Paths {
    /**
     * execute_quote: Execute a quote
     * 
     * @param executeQuoteRequest  (optional)
     */
    @Serializable @Resource("/quote") class executeQuote(val executeQuoteRequest: ExecuteQuoteRequest? = null)

    /**
     * fetch_quote: Get a quote for a payment
     * 
     * @param sendingCurrencyCode The currency code being sent from the sender&#39;s wallet. 
     * @param receivingCurrencyCode The currency code of the currency that the receiver will receive. 
     * @param lockedCurrencyAmount The amount to send/receive in the smallest unit of the locked currency (eg. cents). See &#x60;locked_currency_side&#x60; for more information. 
     * @param lockedCurrencySide The side of the quote which should be locked and specified in the &#x60;locked_currency_amount&#x60;. For example, if I want to send exactly $5 MXN from my wallet, I would set this to \&quot;sending\&quot;, and the &#x60;locked_currency_amount&#x60; to 500 (in cents). If I want the receiver to receive exactly $10 USD, I would set this to \&quot;receiving\&quot; and the &#x60;locked_currency_amount&#x60; to 10000 (in cents). 
     * @param receivingAddress The UMA address to send the payment to. 
     */
    @Serializable @Resource("/quote") class fetchQuote(val sendingCurrencyCode: kotlin.String, val receivingCurrencyCode: kotlin.String, val lockedCurrencyAmount: kotlin.Long, val lockedCurrencySide: kotlin.String, val receivingAddress: kotlin.String)

    /**
     * get_balance: Get the balance of the user&#39;s wallet
     * 
     * @param currencyCode The currency code of the balance. Assumed to be in msats if not provided.  (optional)
     */
    @Serializable @Resource("/balance") class getBalance(val currencyCode: kotlin.String? = null)

    /**
     * get_info: Get information about the user&#39;s wallet connection
     * 
     */
    @Serializable @Resource("/info") class getInfo

    /**
     * lookup_invoice: Get an invoice by its payment hash
     * 
     * @param paymentHash The payment hash of the invoice. 
     */
    @Serializable @Resource("/invoices/{payment_hash}") class lookupInvoice(val paymentHash: kotlin.String)

    /**
     * lookup_user: Get receiver info by UMA
     * 
     * @param receiverUma The receiver&#39;s UMA. 
     * @param baseSendingCurrencyCode The currency code of the sender&#39;s balance. Assumed to be in msats if not provided.  This is used to calculate the multiplier for the receiver&#39;s currencies. (optional)
     */
    @Serializable @Resource("/receiver/uma/{receiver_uma}") class lookupUser(val receiverUma: kotlin.String, val baseSendingCurrencyCode: kotlin.String? = null)

    /**
     * make_invoice: Create a new invoice
     * 
     * @param makeInvoiceRequest  (optional)
     */
    @Serializable @Resource("/invoice") class makeInvoice(val makeInvoiceRequest: MakeInvoiceRequest? = null)

    /**
     * pay_invoice: Pay a bolt11 invoice
     * 
     * @param payInvoiceRequest  (optional)
     */
    @Serializable @Resource("/payments/bolt11") class payInvoice(val payInvoiceRequest: PayInvoiceRequest? = null)

    /**
     * pay_to_address: Pay to an LNURL address
     * 
     * @param payToAddressRequest  (optional)
     */
    @Serializable @Resource("/payments/lnurl") class payToAddress(val payToAddressRequest: PayToAddressRequest? = null)

}
