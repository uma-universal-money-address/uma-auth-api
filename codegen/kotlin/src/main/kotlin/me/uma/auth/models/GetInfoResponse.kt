/**
* UMA Auth API
* This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
*
* The version of the OpenAPI document: 0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package me.uma.auth.models

import me.uma.auth.models.CurrencyPreference

/**
 * 
 * @param pubkey The pubkey of the user's node.
 * @param network The bitcoin network of the user's node.
 * @param methods A list of supported methods for this connection.
 * @param alias The alias of the user's node.
 * @param color The color of the user's node.
 * @param blockHeight The current block height of the user's node.
 * @param blockHash The current block hash of the user's node.
 * @param lud16 The lightning or UMA address for the user.
 * @param currencies The currencies the user's wallet supports. Ordered by preference. If not provided, assume this user only supports BTC.
 */
data class GetInfoResponse(
    /* The pubkey of the user's node. */
    val pubkey: kotlin.String,
    /* The bitcoin network of the user's node. */
    val network: GetInfoResponse.Network,
    /* A list of supported methods for this connection. */
    val methods: kotlin.collections.List<kotlin.String>,
    /* The alias of the user's node. */
    val alias: kotlin.String? = null,
    /* The color of the user's node. */
    val color: kotlin.String? = null,
    /* The current block height of the user's node. */
    val blockHeight: java.math.BigDecimal? = null,
    /* The current block hash of the user's node. */
    val blockHash: kotlin.String? = null,
    /* The lightning or UMA address for the user. */
    val lud16: kotlin.String? = null,
    /* The currencies the user's wallet supports. Ordered by preference. If not provided, assume this user only supports BTC. */
    val currencies: kotlin.collections.List<CurrencyPreference>? = null
) 
{
    /**
    * The bitcoin network of the user's node.
    * Values: regtest,signet,testnet,mainnet
    */
    enum class Network(val value: kotlin.String){
        regtest("regtest"),
        signet("signet"),
        testnet("testnet"),
        mainnet("mainnet");
    }
}

