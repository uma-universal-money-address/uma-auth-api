/**
* UMA Auth API
* This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
*
* The version of the OpenAPI document: 0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package me.uma.auth.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import me.uma.auth.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import me.uma.auth.infrastructure.ApiPrincipal
import me.uma.auth.models.ErrorResponse
import me.uma.auth.models.ExecuteQuoteResponse
import me.uma.auth.models.GetBalanceResponse
import me.uma.auth.models.GetInfoResponse
import me.uma.auth.models.ListTransactionsResponse
import me.uma.auth.models.LookupUserResponse
import me.uma.auth.models.MakeInvoiceRequest
import me.uma.auth.models.PayInvoiceRequest
import me.uma.auth.models.PayInvoiceResponse
import me.uma.auth.models.PayToAddressRequest
import me.uma.auth.models.PayToAddressResponse
import me.uma.auth.models.Quote
import me.uma.auth.models.Transaction
import me.uma.auth.models.TransactionType

fun Route.UmaAuthApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    authenticate("bearerAuth") {
    post<Paths.executeQuote> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "preimage" : "abcd1234"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("bearerAuth") {
    get<Paths.fetchQuoteForLud16> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "sending_currency_code" : "MXN",
              "receiving_currency_code" : "USD",
              "fees" : 10,
              "expires_at" : 1683148800,
              "total_sending_amount" : 123010,
              "total_receiving_amount" : 1000,
              "multiplier" : 123,
              "created_at" : 1683148800,
              "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("bearerAuth") {
    get<Paths.getBalance> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "balance" : 1000,
              "currency_code" : "USD"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("bearerAuth") {
    get<Paths.getInfo> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "color" : "#FF0000",
              "methods" : [ "make_invoice", "make_invoice" ],
              "lud16" : "$alice@vasp.net",
              "alias" : "Alice's Wallet",
              "block_hash" : "abcd1234",
              "block_height" : 1000,
              "pubkey" : "abcd1234",
              "network" : "testnet",
              "currencies" : [ {
                "symbol" : "$",
                "code" : "USD",
                "min" : 1,
                "max" : 1000000,
                "multiplier" : 100000000,
                "decimals" : 2,
                "name" : "United States Dollar"
              }, {
                "symbol" : "$",
                "code" : "USD",
                "min" : 1,
                "max" : 1000000,
                "multiplier" : 100000000,
                "decimals" : 2,
                "name" : "United States Dollar"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("bearerAuth") {
    get<Paths.listTransactions> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "transactions" : [ {
                "amount" : 1000,
                "fees_paid" : 1000,
                "metadata" : { },
                "expires_at" : 1683148800,
                "description_hash" : "abcd1234",
                "preimage" : "abcd1234",
                "description" : "Pay for pizza.",
                "created_at" : 1683148800,
                "invoice" : "lntb1u1pw0k7jw",
                "type" : "incoming",
                "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15"
              }, {
                "amount" : 1000,
                "fees_paid" : 1000,
                "metadata" : { },
                "expires_at" : 1683148800,
                "description_hash" : "abcd1234",
                "preimage" : "abcd1234",
                "description" : "Pay for pizza.",
                "created_at" : 1683148800,
                "invoice" : "lntb1u1pw0k7jw",
                "type" : "incoming",
                "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("bearerAuth") {
    get<Paths.lookupInvoice> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "amount" : 1000,
              "fees_paid" : 1000,
              "metadata" : { },
              "expires_at" : 1683148800,
              "description_hash" : "abcd1234",
              "preimage" : "abcd1234",
              "description" : "Pay for pizza.",
              "created_at" : 1683148800,
              "invoice" : "lntb1u1pw0k7jw",
              "type" : "incoming",
              "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("bearerAuth") {
    get<Paths.lookupUserByLud16> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "currencies" : [ {
                "symbol" : "$",
                "code" : "USD",
                "min" : 1,
                "max" : 1000000,
                "multiplier" : 100000000,
                "decimals" : 2,
                "name" : "United States Dollar"
              }, {
                "symbol" : "$",
                "code" : "USD",
                "min" : 1,
                "max" : 1000000,
                "multiplier" : 100000000,
                "decimals" : 2,
                "name" : "United States Dollar"
              } ]
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("bearerAuth") {
    post<Paths.makeInvoice> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "amount" : 1000,
              "fees_paid" : 1000,
              "metadata" : { },
              "expires_at" : 1683148800,
              "description_hash" : "abcd1234",
              "preimage" : "abcd1234",
              "description" : "Pay for pizza.",
              "created_at" : 1683148800,
              "invoice" : "lntb1u1pw0k7jw",
              "type" : "incoming",
              "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("bearerAuth") {
    post<Paths.payInvoice> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "preimage" : "abcd1234"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

    authenticate("bearerAuth") {
    post<Paths.payToLud16Address> {
        
        val principal = null!!
        
        
        val exampleContentType = "application/json"
            val exampleContentString = """{
              "quote" : {
                "sending_currency_code" : "MXN",
                "receiving_currency_code" : "USD",
                "fees" : 10,
                "expires_at" : 1683148800,
                "total_sending_amount" : 123010,
                "total_receiving_amount" : 1000,
                "multiplier" : 123,
                "created_at" : 1683148800,
                "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15"
              },
              "preimage" : "abcd1234"
            }"""
            
            when (exampleContentType) {
                "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
                "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
                else -> call.respondText(exampleContentString)
            }
        
    }
    }

}
