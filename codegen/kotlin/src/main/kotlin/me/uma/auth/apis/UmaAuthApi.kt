/**
* UMA Auth API
* This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
*
* The version of the OpenAPI document: 0.1
* 
*
* NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
* https://openapi-generator.tech
* Do not edit the class manually.
*/
package me.uma.auth.apis

import com.google.gson.Gson
import io.ktor.http.*
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import me.uma.auth.Paths
import io.ktor.server.resources.options
import io.ktor.server.resources.get
import io.ktor.server.resources.post
import io.ktor.server.resources.put
import io.ktor.server.resources.delete
import io.ktor.server.resources.head
import io.ktor.server.resources.patch
import io.ktor.server.routing.*
import me.uma.auth.infrastructure.ApiPrincipal
import me.uma.auth.models.ExecuteQuoteRequest
import me.uma.auth.models.ExecuteQuoteResponse
import me.uma.auth.models.GetBalanceResponse
import me.uma.auth.models.GetInfoResponse
import me.uma.auth.models.Invoice
import me.uma.auth.models.LookupUserResponse
import me.uma.auth.models.MakeInvoiceRequest
import me.uma.auth.models.PayInvoiceRequest
import me.uma.auth.models.PayInvoiceResponse
import me.uma.auth.models.PayToAddressRequest
import me.uma.auth.models.PayToAddressResponse
import me.uma.auth.models.Quote

fun Route.UmaAuthApi() {
    val gson = Gson()
    val empty = mutableMapOf<String, Any?>()

    post<Paths.executeQuote> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "preimage" : "abcd1234"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.fetchQuote> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "sending_currency_code" : "MXN",
          "receiving_currency_code" : "USD",
          "fees" : 10,
          "expires_at" : "2021-01-01T00:00:00Z",
          "total_sending_amount" : 123010,
          "total_receiving_amount" : 1000,
          "multiplier" : 123,
          "created_at" : "2021-01-01T00:00:00Z",
          "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.getBalance> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "balance" : 1000,
          "currency_code" : "USD"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.getInfo> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "color" : "#FF0000",
          "methods" : [ "make_invoice", "make_invoice" ],
          "lud16" : "$alice@vasp.net",
          "alias" : "Alice's Wallet",
          "block_hash" : "abcd1234",
          "block_height" : 1000,
          "pubkey" : "abcd1234",
          "network" : "testnet",
          "currencies" : [ {
            "symbol" : "$",
            "code" : "USD",
            "min" : 1,
            "max" : 1000000,
            "multiplier" : 100000000,
            "decimals" : 2,
            "name" : "United States Dollar"
          }, {
            "symbol" : "$",
            "code" : "USD",
            "min" : 1,
            "max" : 1000000,
            "multiplier" : 100000000,
            "decimals" : 2,
            "name" : "United States Dollar"
          } ]
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.lookupInvoice> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "amount" : 1000,
          "metadata" : { },
          "expires_at" : "2021-01-01T00:00:00Z",
          "payment_request" : "lntb1u1pw0k7jw",
          "preimage" : "abcd1234",
          "memo" : "Payment for services rendered.",
          "created_at" : "2021-01-01T00:00:00Z",
          "settled_at" : "2021-01-01T00:00:00Z",
          "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15",
          "type" : "incoming"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    get<Paths.lookupUser> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "currencies" : [ {
            "symbol" : "$",
            "code" : "USD",
            "min" : 1,
            "max" : 1000000,
            "multiplier" : 100000000,
            "decimals" : 2,
            "name" : "United States Dollar"
          }, {
            "symbol" : "$",
            "code" : "USD",
            "min" : 1,
            "max" : 1000000,
            "multiplier" : 100000000,
            "decimals" : 2,
            "name" : "United States Dollar"
          } ]
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.makeInvoice> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "amount" : 1000,
          "metadata" : { },
          "expires_at" : "2021-01-01T00:00:00Z",
          "payment_request" : "lntb1u1pw0k7jw",
          "preimage" : "abcd1234",
          "memo" : "Payment for services rendered.",
          "created_at" : "2021-01-01T00:00:00Z",
          "settled_at" : "2021-01-01T00:00:00Z",
          "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15",
          "type" : "incoming"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.payInvoice> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "preimage" : "abcd1234"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

    post<Paths.payToAddress> {
        val exampleContentType = "application/json"
        val exampleContentString = """{
          "quote" : {
            "sending_currency_code" : "MXN",
            "receiving_currency_code" : "USD",
            "fees" : 10,
            "expires_at" : "2021-01-01T00:00:00Z",
            "total_sending_amount" : 123010,
            "total_receiving_amount" : 1000,
            "multiplier" : 123,
            "created_at" : "2021-01-01T00:00:00Z",
            "payment_hash" : "f1d2d2f924e986ac86fdf7b36c94bcdf32beec15"
          },
          "preimage" : "abcd1234"
        }"""
        
        when (exampleContentType) {
            "application/json" -> call.respond(gson.fromJson(exampleContentString, empty::class.java))
            "application/xml" -> call.respondText(exampleContentString, ContentType.Text.Xml)
            else -> call.respondText(exampleContentString)
        }
        
    }

}
