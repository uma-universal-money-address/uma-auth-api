/* tslint:disable */
/* eslint-disable */
/**
 * UMA Auth API
 * This API allows you to authenticate with the UMA server to take actions on a user\'s wallet. It\'s the exposed communication layer between the NWC server and the main UMA server.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@lightspark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CurrencyPreference } from './CurrencyPreference';
import {
    CurrencyPreferenceFromJSON,
    CurrencyPreferenceFromJSONTyped,
    CurrencyPreferenceToJSON,
} from './CurrencyPreference';

/**
 * 
 * @export
 * @interface GetInfoResponse
 */
export interface GetInfoResponse {
    /**
     * The alias of the user's node.
     * @type {string}
     * @memberof GetInfoResponse
     */
    alias?: string;
    /**
     * The color of the user's node.
     * @type {string}
     * @memberof GetInfoResponse
     */
    color?: string;
    /**
     * The pubkey of the user's node.
     * @type {string}
     * @memberof GetInfoResponse
     */
    pubkey: string;
    /**
     * The bitcoin network of the user's node.
     * @type {string}
     * @memberof GetInfoResponse
     */
    network: GetInfoResponseNetworkEnum;
    /**
     * The current block height of the user's node.
     * @type {number}
     * @memberof GetInfoResponse
     */
    blockHeight?: number;
    /**
     * The current block hash of the user's node.
     * @type {string}
     * @memberof GetInfoResponse
     */
    blockHash?: string;
    /**
     * A list of supported methods for this connection.
     * @type {Array<string>}
     * @memberof GetInfoResponse
     */
    methods: Array<string>;
    /**
     * The lightning or UMA address for the user.
     * @type {string}
     * @memberof GetInfoResponse
     */
    lud16?: string;
    /**
     * The currencies the user's wallet supports. Ordered by preference. If not provided, assume this user only supports BTC.
     * @type {Array<CurrencyPreference>}
     * @memberof GetInfoResponse
     */
    currencies?: Array<CurrencyPreference>;
}


/**
 * @export
 */
export const GetInfoResponseNetworkEnum = {
    Regtest: 'regtest',
    Signet: 'signet',
    Testnet: 'testnet',
    Mainnet: 'mainnet'
} as const;
export type GetInfoResponseNetworkEnum = typeof GetInfoResponseNetworkEnum[keyof typeof GetInfoResponseNetworkEnum];


/**
 * Check if a given object implements the GetInfoResponse interface.
 */
export function instanceOfGetInfoResponse(value: object): value is GetInfoResponse {
    if (!('pubkey' in value) || value['pubkey'] === undefined) return false;
    if (!('network' in value) || value['network'] === undefined) return false;
    if (!('methods' in value) || value['methods'] === undefined) return false;
    return true;
}

export function GetInfoResponseFromJSON(json: any): GetInfoResponse {
    return GetInfoResponseFromJSONTyped(json, false);
}

export function GetInfoResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetInfoResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'alias': json['alias'] == null ? undefined : json['alias'],
        'color': json['color'] == null ? undefined : json['color'],
        'pubkey': json['pubkey'],
        'network': json['network'],
        'blockHeight': json['block_height'] == null ? undefined : json['block_height'],
        'blockHash': json['block_hash'] == null ? undefined : json['block_hash'],
        'methods': json['methods'],
        'lud16': json['lud16'] == null ? undefined : json['lud16'],
        'currencies': json['currencies'] == null ? undefined : ((json['currencies'] as Array<any>).map(CurrencyPreferenceFromJSON)),
    };
}

export function GetInfoResponseToJSON(value?: GetInfoResponse | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'alias': value['alias'],
        'color': value['color'],
        'pubkey': value['pubkey'],
        'network': value['network'],
        'block_height': value['blockHeight'],
        'block_hash': value['blockHash'],
        'methods': value['methods'],
        'lud16': value['lud16'],
        'currencies': value['currencies'] == null ? undefined : ((value['currencies'] as Array<any>).map(CurrencyPreferenceToJSON)),
    };
}

