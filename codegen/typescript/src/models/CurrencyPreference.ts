/* tslint:disable */
/* eslint-disable */
/**
 * UMA Auth API
 * This API allows you to authenticate with the UMA server to take actions on a user\'s wallet. It\'s the exposed communication layer between the NWC server and the main UMA server.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@lightspark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Currency } from './Currency';
import {
    CurrencyFromJSON,
    CurrencyFromJSONTyped,
    CurrencyToJSON,
} from './Currency';

/**
 * 
 * @export
 * @interface CurrencyPreference
 */
export interface CurrencyPreference {
    /**
     * 
     * @type {Currency}
     * @memberof CurrencyPreference
     */
    currency?: Currency;
    /**
     * Estimated number of milli-sats per smallest unit of this currency (eg. cents) If base_sending_currency_code was specified, this is the rate relative to that currency instead of milli-sats.
     * @type {number}
     * @memberof CurrencyPreference
     */
    multiplier: number;
    /**
     * The minimum amount that can be received in this currency.
     * @type {number}
     * @memberof CurrencyPreference
     */
    min: number;
    /**
     * The maximum amount that can be received in this currency.
     * @type {number}
     * @memberof CurrencyPreference
     */
    max: number;
}

/**
 * Check if a given object implements the CurrencyPreference interface.
 */
export function instanceOfCurrencyPreference(value: object): value is CurrencyPreference {
    if (!('multiplier' in value) || value['multiplier'] === undefined) return false;
    if (!('min' in value) || value['min'] === undefined) return false;
    if (!('max' in value) || value['max'] === undefined) return false;
    return true;
}

export function CurrencyPreferenceFromJSON(json: any): CurrencyPreference {
    return CurrencyPreferenceFromJSONTyped(json, false);
}

export function CurrencyPreferenceFromJSONTyped(json: any, ignoreDiscriminator: boolean): CurrencyPreference {
    if (json == null) {
        return json;
    }
    return {
        
        'currency': json['currency'] == null ? undefined : CurrencyFromJSON(json['currency']),
        'multiplier': json['multiplier'],
        'min': json['min'],
        'max': json['max'],
    };
}

export function CurrencyPreferenceToJSON(value?: CurrencyPreference | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'currency': CurrencyToJSON(value['currency']),
        'multiplier': value['multiplier'],
        'min': value['min'],
        'max': value['max'],
    };
}

