/* tslint:disable */
/* eslint-disable */
/**
 * UMA Auth API
 * This API allows you to authenticate with the UMA server to take actions on a user\'s wallet. It\'s the exposed communication layer between the NWC server and the main UMA server.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@lightspark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Currency
 */
export interface Currency {
    /**
     * The ISO-4217 currency code.
     * @type {string}
     * @memberof Currency
     */
    code: string;
    /**
     * The currency symbol.
     * @type {string}
     * @memberof Currency
     */
    symbol: string;
    /**
     * The currency name.
     * @type {string}
     * @memberof Currency
     */
    name: string;
    /**
     * Number of digits after the decimal point for display on the sender side, and to add clarity around what the "smallest unit" of the currency is. For example, in USD, by convention, there are 2 digits for cents - $5.95. In this case, `decimals` would be 2. Note that the multiplier is still always in the smallest unit (cents). In addition to display purposes, this field can be used to resolve ambiguity in what the multiplier means. For example, if the currency is "BTC" and the multiplier is 1000, really we're exchanging in SATs, so `decimals` would be 8.
     * @type {number}
     * @memberof Currency
     */
    decimals: number;
}

/**
 * Check if a given object implements the Currency interface.
 */
export function instanceOfCurrency(value: object): value is Currency {
    if (!('code' in value) || value['code'] === undefined) return false;
    if (!('symbol' in value) || value['symbol'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('decimals' in value) || value['decimals'] === undefined) return false;
    return true;
}

export function CurrencyFromJSON(json: any): Currency {
    return CurrencyFromJSONTyped(json, false);
}

export function CurrencyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Currency {
    if (json == null) {
        return json;
    }
    return {
        
        'code': json['code'],
        'symbol': json['symbol'],
        'name': json['name'],
        'decimals': json['decimals'],
    };
}

export function CurrencyToJSON(value?: Currency | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'code': value['code'],
        'symbol': value['symbol'],
        'name': value['name'],
        'decimals': value['decimals'],
    };
}

