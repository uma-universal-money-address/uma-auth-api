/* tslint:disable */
/* eslint-disable */
/**
 * UMA Auth API
 * This API allows you to authenticate with the UMA server to take actions on a user\'s wallet. It\'s the exposed communication layer between the NWC server and the main UMA server.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@lightspark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface PayToAddressRequest
 */
export interface PayToAddressRequest {
    /**
     * The LUD16 address to pay.
     * @type {string}
     * @memberof PayToAddressRequest
     */
    receiverAddress: string;
    /**
     * The code of the currency being sent from the sender's wallet.
     * @type {string}
     * @memberof PayToAddressRequest
     */
    sendingCurrencyCode: string;
    /**
     * The amount to send in the smallest unit of the sending currency (eg. cents).
     * @type {number}
     * @memberof PayToAddressRequest
     */
    sendingCurrencyAmount: number;
    /**
     * The code of the currency being received by the receiver. If not provided, the receiver's default currency will be used.
     * @type {string}
     * @memberof PayToAddressRequest
     */
    receivingCurrencyCode?: string;
    /**
     * The code of the currency the sender used to set budget. Optional if it is the same as `sending_currency_code`.
     * @type {string}
     * @memberof PayToAddressRequest
     */
    budgetCurrencyCode?: string;
}

/**
 * Check if a given object implements the PayToAddressRequest interface.
 */
export function instanceOfPayToAddressRequest(value: object): value is PayToAddressRequest {
    if (!('receiverAddress' in value) || value['receiverAddress'] === undefined) return false;
    if (!('sendingCurrencyCode' in value) || value['sendingCurrencyCode'] === undefined) return false;
    if (!('sendingCurrencyAmount' in value) || value['sendingCurrencyAmount'] === undefined) return false;
    return true;
}

export function PayToAddressRequestFromJSON(json: any): PayToAddressRequest {
    return PayToAddressRequestFromJSONTyped(json, false);
}

export function PayToAddressRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PayToAddressRequest {
    if (json == null) {
        return json;
    }
    return {
        
        'receiverAddress': json['receiver_address'],
        'sendingCurrencyCode': json['sending_currency_code'],
        'sendingCurrencyAmount': json['sending_currency_amount'],
        'receivingCurrencyCode': json['receiving_currency_code'] == null ? undefined : json['receiving_currency_code'],
        'budgetCurrencyCode': json['budget_currency_code'] == null ? undefined : json['budget_currency_code'],
    };
}

export function PayToAddressRequestToJSON(value?: PayToAddressRequest | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'receiver_address': value['receiverAddress'],
        'sending_currency_code': value['sendingCurrencyCode'],
        'sending_currency_amount': value['sendingCurrencyAmount'],
        'receiving_currency_code': value['receivingCurrencyCode'],
        'budget_currency_code': value['budgetCurrencyCode'],
    };
}

