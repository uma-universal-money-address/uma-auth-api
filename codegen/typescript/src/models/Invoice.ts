/* tslint:disable */
/* eslint-disable */
/**
 * UMA Auth API
 * This API allows you to authenticate with the UMA server to take actions on a user\'s wallet. It\'s the exposed communication layer between the NWC server and the main UMA server.
 *
 * The version of the OpenAPI document: 0.1
 * Contact: info@lightspark.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * The full, encoded payment request.
     * @type {string}
     * @memberof Invoice
     */
    paymentRequest: string;
    /**
     * The amount of the invoice in msats.
     * @type {number}
     * @memberof Invoice
     */
    amount: number;
    /**
     * The payment hash of the invoice.
     * @type {string}
     * @memberof Invoice
     */
    paymentHash: string;
    /**
     * A memo attached to the invoice.
     * @type {string}
     * @memberof Invoice
     */
    memo?: string | null;
    /**
     * Additional metadata attached to the invoice.
     * @type {object}
     * @memberof Invoice
     */
    metadata?: object | null;
    /**
     * The payment preimage of the invoice.
     * @type {string}
     * @memberof Invoice
     */
    preimage?: string | null;
    /**
     * The time the invoice expires.
     * @type {Date}
     * @memberof Invoice
     */
    expiresAt?: Date | null;
    /**
     * The time the invoice was created.
     * @type {Date}
     * @memberof Invoice
     */
    createdAt: Date;
    /**
     * The time the invoice was settled.
     * @type {Date}
     * @memberof Invoice
     */
    settledAt?: Date | null;
    /**
     * Whether the invoice is incoming (created by this user) or outgoing (created by another user).
     * @type {string}
     * @memberof Invoice
     */
    type: InvoiceTypeEnum;
}


/**
 * @export
 */
export const InvoiceTypeEnum = {
    Incoming: 'incoming',
    Outgoing: 'outgoing'
} as const;
export type InvoiceTypeEnum = typeof InvoiceTypeEnum[keyof typeof InvoiceTypeEnum];


/**
 * Check if a given object implements the Invoice interface.
 */
export function instanceOfInvoice(value: object): value is Invoice {
    if (!('paymentRequest' in value) || value['paymentRequest'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('paymentHash' in value) || value['paymentHash'] === undefined) return false;
    if (!('createdAt' in value) || value['createdAt'] === undefined) return false;
    if (!('type' in value) || value['type'] === undefined) return false;
    return true;
}

export function InvoiceFromJSON(json: any): Invoice {
    return InvoiceFromJSONTyped(json, false);
}

export function InvoiceFromJSONTyped(json: any, ignoreDiscriminator: boolean): Invoice {
    if (json == null) {
        return json;
    }
    return {
        
        'paymentRequest': json['payment_request'],
        'amount': json['amount'],
        'paymentHash': json['payment_hash'],
        'memo': json['memo'] == null ? undefined : json['memo'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
        'preimage': json['preimage'] == null ? undefined : json['preimage'],
        'expiresAt': json['expires_at'] == null ? undefined : (new Date(json['expires_at'])),
        'createdAt': (new Date(json['created_at'])),
        'settledAt': json['settled_at'] == null ? undefined : (new Date(json['settled_at'])),
        'type': json['type'],
    };
}

export function InvoiceToJSON(value?: Invoice | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'payment_request': value['paymentRequest'],
        'amount': value['amount'],
        'payment_hash': value['paymentHash'],
        'memo': value['memo'],
        'metadata': value['metadata'],
        'preimage': value['preimage'],
        'expires_at': value['expiresAt'] == null ? undefined : ((value['expiresAt'] as any).toISOString()),
        'created_at': ((value['createdAt']).toISOString()),
        'settled_at': value['settledAt'] == null ? undefined : ((value['settledAt'] as any).toISOString()),
        'type': value['type'],
    };
}

