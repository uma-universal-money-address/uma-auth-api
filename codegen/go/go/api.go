// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * UMA Auth API
 *
 * This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
 *
 * API version: 0.1
 */

package umaauth

import (
	"context"
	"net/http"
)



// DefaultAPIRouter defines the required methods for binding the api requests to a responses for the DefaultAPI
// The DefaultAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DefaultAPIServicer to perform the required actions, then write the service results to the http response.
type DefaultAPIRouter interface { 
	ExecuteQuote(http.ResponseWriter, *http.Request)
	FetchQuote(http.ResponseWriter, *http.Request)
	GetBalance(http.ResponseWriter, *http.Request)
	GetInfo(http.ResponseWriter, *http.Request)
	LookupInvoice(http.ResponseWriter, *http.Request)
	LookupUser(http.ResponseWriter, *http.Request)
	MakeInvoice(http.ResponseWriter, *http.Request)
	PayInvoice(http.ResponseWriter, *http.Request)
	PayToAddress(http.ResponseWriter, *http.Request)
}


// DefaultAPIServicer defines the api actions for the DefaultAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DefaultAPIServicer interface { 
	ExecuteQuote(context.Context, ExecuteQuoteRequest) (ImplResponse, error)
	FetchQuote(context.Context, string, string, float32, string, string) (ImplResponse, error)
	GetBalance(context.Context, GetBalanceRequest) (ImplResponse, error)
	GetInfo(context.Context) (ImplResponse, error)
	LookupInvoice(context.Context, string) (ImplResponse, error)
	LookupUser(context.Context, string, string) (ImplResponse, error)
	MakeInvoice(context.Context, MakeInvoiceRequest) (ImplResponse, error)
	PayInvoice(context.Context, PayInvoiceRequest) (ImplResponse, error)
	PayToAddress(context.Context, PayToAddressRequest) (ImplResponse, error)
}
