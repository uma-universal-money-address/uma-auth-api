// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * UMA Auth API
 *
 * This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
 *
 * API version: 0.1
 */

package umaauth


import (
	"fmt"
)


// ErrorCode : The NIP47 response error code.
type ErrorCode string

// List of ErrorCode
const (
	RATE_LIMITED ErrorCode = "RATE_LIMITED"
	NOT_IMPLEMENTED ErrorCode = "NOT_IMPLEMENTED"
	INSUFFICIENT_BALANCE ErrorCode = "INSUFFICIENT_BALANCE"
	PAYMENT_FAILED ErrorCode = "PAYMENT_FAILED"
	NOT_FOUND ErrorCode = "NOT_FOUND"
	QUOTA_EXCEEDED ErrorCode = "QUOTA_EXCEEDED"
	RESTRICTED ErrorCode = "RESTRICTED"
	UNAUTHORIZED ErrorCode = "UNAUTHORIZED"
	INTERNAL ErrorCode = "INTERNAL"
	OTHER ErrorCode = "OTHER"
)

// AllowedErrorCodeEnumValues is all the allowed values of ErrorCode enum
var AllowedErrorCodeEnumValues = []ErrorCode{
	"RATE_LIMITED",
	"NOT_IMPLEMENTED",
	"INSUFFICIENT_BALANCE",
	"PAYMENT_FAILED",
	"NOT_FOUND",
	"QUOTA_EXCEEDED",
	"RESTRICTED",
	"UNAUTHORIZED",
	"INTERNAL",
	"OTHER",
}

// validErrorCodeEnumValue provides a map of ErrorCodes for fast verification of use input
var validErrorCodeEnumValues = map[ErrorCode]struct{}{
	"RATE_LIMITED": {},
	"NOT_IMPLEMENTED": {},
	"INSUFFICIENT_BALANCE": {},
	"PAYMENT_FAILED": {},
	"NOT_FOUND": {},
	"QUOTA_EXCEEDED": {},
	"RESTRICTED": {},
	"UNAUTHORIZED": {},
	"INTERNAL": {},
	"OTHER": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ErrorCode) IsValid() bool {
	_, ok := validErrorCodeEnumValues[v]
	return ok
}

// NewErrorCodeFromValue returns a pointer to a valid ErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewErrorCodeFromValue(v string) (ErrorCode, error) {
	ev := ErrorCode(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for ErrorCode: valid values are %v", v, AllowedErrorCodeEnumValues)
}



// AssertErrorCodeRequired checks if the required fields are not zero-ed
func AssertErrorCodeRequired(obj ErrorCode) error {
	return nil
}

// AssertErrorCodeConstraints checks if the values respects the defined constraints
func AssertErrorCodeConstraints(obj ErrorCode) error {
	return nil
}
