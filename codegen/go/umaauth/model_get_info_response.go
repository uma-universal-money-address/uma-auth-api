// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * UMA Auth API
 *
 * This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
 *
 * API version: 0.1
 */

package umaauth


import (
	"errors"
)



type GetInfoResponse struct {

	// The alias of the user's node.
	Alias string `json:"alias,omitempty"`

	// The color of the user's node.
	Color string `json:"color,omitempty"`

	// The pubkey of the user's node.
	Pubkey string `json:"pubkey"`

	// The bitcoin network of the user's node.
	Network string `json:"network"`

	// The current block height of the user's node.
	BlockHeight int32 `json:"block_height,omitempty"`

	// The current block hash of the user's node.
	BlockHash string `json:"block_hash,omitempty"`

	// A list of supported methods for this connection.
	Methods []string `json:"methods"`

	// The lightning or UMA address for the user.
	Lud16 string `json:"lud16,omitempty"`

	// The currencies the user's wallet supports. Ordered by preference. If not provided, assume this user only supports BTC.
	Currencies []CurrencyPreference `json:"currencies,omitempty"`
}

// AssertGetInfoResponseRequired checks if the required fields are not zero-ed
func AssertGetInfoResponseRequired(obj GetInfoResponse) error {
	elements := map[string]interface{}{
		"pubkey": obj.Pubkey,
		"network": obj.Network,
		"methods": obj.Methods,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Currencies {
		if err := AssertCurrencyPreferenceRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertGetInfoResponseConstraints checks if the values respects the defined constraints
func AssertGetInfoResponseConstraints(obj GetInfoResponse) error {
	if obj.BlockHeight < 0 {
		return &ParsingError{Param: "BlockHeight", Err: errors.New(errMsgMinValueConstraint)}
	}
	for _, el := range obj.Currencies {
		if err := AssertCurrencyPreferenceConstraints(el); err != nil {
			return err
		}
	}
	return nil
}
