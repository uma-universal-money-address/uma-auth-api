// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * UMA Auth API
 *
 * This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
 *
 * API version: 0.1
 */

package umaauth


import (
	"fmt"
)


// LockedCurrencySide : The side of the quote which should be locked and specified in the `locked_currency_amount`. For example, if I want to send exactly $5 MXN from my wallet, I would set this to \"sending\", and the `locked_currency_amount` to 500 (in cents). If I want the receiver to receive exactly $10 USD, I would set this to \"receiving\" and the `locked_currency_amount` to 10000 (in cents).
type LockedCurrencySide string

// List of LockedCurrencySide
const (
	SENDING LockedCurrencySide = "sending"
	RECEIVING LockedCurrencySide = "receiving"
)

// AllowedLockedCurrencySideEnumValues is all the allowed values of LockedCurrencySide enum
var AllowedLockedCurrencySideEnumValues = []LockedCurrencySide{
	"sending",
	"receiving",
}

// validLockedCurrencySideEnumValue provides a map of LockedCurrencySides for fast verification of use input
var validLockedCurrencySideEnumValues = map[LockedCurrencySide]struct{}{
	"sending": {},
	"receiving": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LockedCurrencySide) IsValid() bool {
	_, ok := validLockedCurrencySideEnumValues[v]
	return ok
}

// NewLockedCurrencySideFromValue returns a pointer to a valid LockedCurrencySide
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLockedCurrencySideFromValue(v string) (LockedCurrencySide, error) {
	ev := LockedCurrencySide(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for LockedCurrencySide: valid values are %v", v, AllowedLockedCurrencySideEnumValues)
}



// AssertLockedCurrencySideRequired checks if the required fields are not zero-ed
func AssertLockedCurrencySideRequired(obj LockedCurrencySide) error {
	return nil
}

// AssertLockedCurrencySideConstraints checks if the values respects the defined constraints
func AssertLockedCurrencySideConstraints(obj LockedCurrencySide) error {
	return nil
}
