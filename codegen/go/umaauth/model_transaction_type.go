// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * UMA Auth API
 *
 * This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
 *
 * API version: 0.1
 */

package umaauth


import (
	"fmt"
)


// TransactionType : Type of transaction: \"incoming\" for invoices, \"outgoing\" for payments.
type TransactionType string

// List of TransactionType
const (
	INCOMING TransactionType = "incoming"
	OUTGOING TransactionType = "outgoing"
)

// AllowedTransactionTypeEnumValues is all the allowed values of TransactionType enum
var AllowedTransactionTypeEnumValues = []TransactionType{
	"incoming",
	"outgoing",
}

// validTransactionTypeEnumValue provides a map of TransactionTypes for fast verification of use input
var validTransactionTypeEnumValues = map[TransactionType]struct{}{
	"incoming": {},
	"outgoing": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TransactionType) IsValid() bool {
	_, ok := validTransactionTypeEnumValues[v]
	return ok
}

// NewTransactionTypeFromValue returns a pointer to a valid TransactionType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTransactionTypeFromValue(v string) (TransactionType, error) {
	ev := TransactionType(v)
	if ev.IsValid() {
		return ev, nil
	}

	return "", fmt.Errorf("invalid value '%v' for TransactionType: valid values are %v", v, AllowedTransactionTypeEnumValues)
}



// AssertTransactionTypeRequired checks if the required fields are not zero-ed
func AssertTransactionTypeRequired(obj TransactionType) error {
	return nil
}

// AssertTransactionTypeConstraints checks if the values respects the defined constraints
func AssertTransactionTypeConstraints(obj TransactionType) error {
	return nil
}
