// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * UMA Auth API
 *
 * This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
 *
 * API version: 0.1
 */

package umaauth


import (
	"errors"
)



type CurrencyPreference struct {

	Currency Currency `json:"currency"`

	// Estimated number of milli-sats per smallest unit of this currency (eg. cents) If base_sending_currency_code was specified, this is the rate relative to that currency instead of milli-sats.
	Multiplier float32 `json:"multiplier"`

	// The minimum amount that can be received in this currency.
	Min int64 `json:"min"`

	// The maximum amount that can be received in this currency.
	Max int64 `json:"max"`
}

// AssertCurrencyPreferenceRequired checks if the required fields are not zero-ed
func AssertCurrencyPreferenceRequired(obj CurrencyPreference) error {
	elements := map[string]interface{}{
		"currency": obj.Currency,
		"multiplier": obj.Multiplier,
		"min": obj.Min,
		"max": obj.Max,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertCurrencyRequired(obj.Currency); err != nil {
		return err
	}
	return nil
}

// AssertCurrencyPreferenceConstraints checks if the values respects the defined constraints
func AssertCurrencyPreferenceConstraints(obj CurrencyPreference) error {
	if err := AssertCurrencyConstraints(obj.Currency); err != nil {
		return err
	}
	if obj.Multiplier < 0 {
		return &ParsingError{Param: "Multiplier", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Min < 0 {
		return &ParsingError{Param: "Min", Err: errors.New(errMsgMinValueConstraint)}
	}
	if obj.Max < 0 {
		return &ParsingError{Param: "Max", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
