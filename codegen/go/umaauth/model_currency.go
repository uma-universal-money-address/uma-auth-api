// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

/*
 * UMA Auth API
 *
 * This API allows you to authenticate with the UMA server to take actions on a user's wallet. It's the exposed communication layer between the NWC server and the main UMA server.
 *
 * API version: 0.1
 */

package umaauth


import (
	"errors"
)



type Currency struct {

	// The ISO-4217 currency code.
	Code string `json:"code"`

	// The currency symbol.
	Symbol string `json:"symbol"`

	// The currency name.
	Name string `json:"name"`

	// Number of digits after the decimal point for display on the sender side, and to add clarity around what the \"smallest unit\" of the currency is. For example, in USD, by convention, there are 2 digits for cents - $5.95. In this case, `decimals` would be 2. Note that the multiplier is still always in the smallest unit (cents). In addition to display purposes, this field can be used to resolve ambiguity in what the multiplier means. For example, if the currency is \"BTC\" and the multiplier is 1000, really we're exchanging in SATs, so `decimals` would be 8.
	Decimals int32 `json:"decimals"`
}

// AssertCurrencyRequired checks if the required fields are not zero-ed
func AssertCurrencyRequired(obj Currency) error {
	elements := map[string]interface{}{
		"code": obj.Code,
		"symbol": obj.Symbol,
		"name": obj.Name,
		"decimals": obj.Decimals,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertCurrencyConstraints checks if the values respects the defined constraints
func AssertCurrencyConstraints(obj Currency) error {
	if obj.Decimals < 0 {
		return &ParsingError{Param: "Decimals", Err: errors.New(errMsgMinValueConstraint)}
	}
	return nil
}
