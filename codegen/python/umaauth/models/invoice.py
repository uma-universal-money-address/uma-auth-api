from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from umaauth.models.base_model import Model
from umaauth import util


class Invoice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, payment_request=None, amount=None, payment_hash=None, memo=None, metadata=None, preimage=None, expires_at=None, created_at=None, settled_at=None, type=None):  # noqa: E501
        """Invoice - a model defined in OpenAPI

        :param payment_request: The payment_request of this Invoice.  # noqa: E501
        :type payment_request: str
        :param amount: The amount of this Invoice.  # noqa: E501
        :type amount: float
        :param payment_hash: The payment_hash of this Invoice.  # noqa: E501
        :type payment_hash: str
        :param memo: The memo of this Invoice.  # noqa: E501
        :type memo: str
        :param metadata: The metadata of this Invoice.  # noqa: E501
        :type metadata: object
        :param preimage: The preimage of this Invoice.  # noqa: E501
        :type preimage: str
        :param expires_at: The expires_at of this Invoice.  # noqa: E501
        :type expires_at: datetime
        :param created_at: The created_at of this Invoice.  # noqa: E501
        :type created_at: datetime
        :param settled_at: The settled_at of this Invoice.  # noqa: E501
        :type settled_at: datetime
        :param type: The type of this Invoice.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'payment_request': str,
            'amount': float,
            'payment_hash': str,
            'memo': str,
            'metadata': object,
            'preimage': str,
            'expires_at': datetime,
            'created_at': datetime,
            'settled_at': datetime,
            'type': str
        }

        self.attribute_map = {
            'payment_request': 'payment_request',
            'amount': 'amount',
            'payment_hash': 'payment_hash',
            'memo': 'memo',
            'metadata': 'metadata',
            'preimage': 'preimage',
            'expires_at': 'expires_at',
            'created_at': 'created_at',
            'settled_at': 'settled_at',
            'type': 'type'
        }

        self._payment_request = payment_request
        self._amount = amount
        self._payment_hash = payment_hash
        self._memo = memo
        self._metadata = metadata
        self._preimage = preimage
        self._expires_at = expires_at
        self._created_at = created_at
        self._settled_at = settled_at
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Invoice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Invoice of this Invoice.  # noqa: E501
        :rtype: Invoice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def payment_request(self) -> str:
        """Gets the payment_request of this Invoice.

        The full, encoded payment request.  # noqa: E501

        :return: The payment_request of this Invoice.
        :rtype: str
        """
        return self._payment_request

    @payment_request.setter
    def payment_request(self, payment_request: str):
        """Sets the payment_request of this Invoice.

        The full, encoded payment request.  # noqa: E501

        :param payment_request: The payment_request of this Invoice.
        :type payment_request: str
        """
        if payment_request is None:
            raise ValueError("Invalid value for `payment_request`, must not be `None`")  # noqa: E501

        self._payment_request = payment_request

    @property
    def amount(self) -> float:
        """Gets the amount of this Invoice.

        The amount of the invoice in msats.  # noqa: E501

        :return: The amount of this Invoice.
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount: float):
        """Sets the amount of this Invoice.

        The amount of the invoice in msats.  # noqa: E501

        :param amount: The amount of this Invoice.
        :type amount: float
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501

        self._amount = amount

    @property
    def payment_hash(self) -> str:
        """Gets the payment_hash of this Invoice.

        The payment hash of the invoice.  # noqa: E501

        :return: The payment_hash of this Invoice.
        :rtype: str
        """
        return self._payment_hash

    @payment_hash.setter
    def payment_hash(self, payment_hash: str):
        """Sets the payment_hash of this Invoice.

        The payment hash of the invoice.  # noqa: E501

        :param payment_hash: The payment_hash of this Invoice.
        :type payment_hash: str
        """
        if payment_hash is None:
            raise ValueError("Invalid value for `payment_hash`, must not be `None`")  # noqa: E501

        self._payment_hash = payment_hash

    @property
    def memo(self) -> str:
        """Gets the memo of this Invoice.

        A memo attached to the invoice.  # noqa: E501

        :return: The memo of this Invoice.
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo: str):
        """Sets the memo of this Invoice.

        A memo attached to the invoice.  # noqa: E501

        :param memo: The memo of this Invoice.
        :type memo: str
        """

        self._memo = memo

    @property
    def metadata(self) -> object:
        """Gets the metadata of this Invoice.

        Additional metadata attached to the invoice.  # noqa: E501

        :return: The metadata of this Invoice.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this Invoice.

        Additional metadata attached to the invoice.  # noqa: E501

        :param metadata: The metadata of this Invoice.
        :type metadata: object
        """

        self._metadata = metadata

    @property
    def preimage(self) -> str:
        """Gets the preimage of this Invoice.

        The payment preimage of the invoice.  # noqa: E501

        :return: The preimage of this Invoice.
        :rtype: str
        """
        return self._preimage

    @preimage.setter
    def preimage(self, preimage: str):
        """Sets the preimage of this Invoice.

        The payment preimage of the invoice.  # noqa: E501

        :param preimage: The preimage of this Invoice.
        :type preimage: str
        """

        self._preimage = preimage

    @property
    def expires_at(self) -> datetime:
        """Gets the expires_at of this Invoice.

        The time the invoice expires.  # noqa: E501

        :return: The expires_at of this Invoice.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: datetime):
        """Sets the expires_at of this Invoice.

        The time the invoice expires.  # noqa: E501

        :param expires_at: The expires_at of this Invoice.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Invoice.

        The time the invoice was created.  # noqa: E501

        :return: The created_at of this Invoice.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Invoice.

        The time the invoice was created.  # noqa: E501

        :param created_at: The created_at of this Invoice.
        :type created_at: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def settled_at(self) -> datetime:
        """Gets the settled_at of this Invoice.

        The time the invoice was settled.  # noqa: E501

        :return: The settled_at of this Invoice.
        :rtype: datetime
        """
        return self._settled_at

    @settled_at.setter
    def settled_at(self, settled_at: datetime):
        """Sets the settled_at of this Invoice.

        The time the invoice was settled.  # noqa: E501

        :param settled_at: The settled_at of this Invoice.
        :type settled_at: datetime
        """

        self._settled_at = settled_at

    @property
    def type(self) -> str:
        """Gets the type of this Invoice.

        Whether the invoice is incoming (created by this user) or outgoing (created by another user).  # noqa: E501

        :return: The type of this Invoice.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Invoice.

        Whether the invoice is incoming (created by this user) or outgoing (created by another user).  # noqa: E501

        :param type: The type of this Invoice.
        :type type: str
        """
        allowed_values = ["incoming", "outgoing"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
