from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from umaauth.models.base_model import Model
from umaauth import util


class GetBalanceResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, balance=None, currency_code=None):  # noqa: E501
        """GetBalanceResponse - a model defined in OpenAPI

        :param balance: The balance of this GetBalanceResponse.  # noqa: E501
        :type balance: float
        :param currency_code: The currency_code of this GetBalanceResponse.  # noqa: E501
        :type currency_code: str
        """
        self.openapi_types = {
            'balance': float,
            'currency_code': str
        }

        self.attribute_map = {
            'balance': 'balance',
            'currency_code': 'currency_code'
        }

        self._balance = balance
        self._currency_code = currency_code

    @classmethod
    def from_dict(cls, dikt) -> 'GetBalanceResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetBalanceResponse of this GetBalanceResponse.  # noqa: E501
        :rtype: GetBalanceResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def balance(self) -> float:
        """Gets the balance of this GetBalanceResponse.

        The balance of the user's wallet.  # noqa: E501

        :return: The balance of this GetBalanceResponse.
        :rtype: float
        """
        return self._balance

    @balance.setter
    def balance(self, balance: float):
        """Sets the balance of this GetBalanceResponse.

        The balance of the user's wallet.  # noqa: E501

        :param balance: The balance of this GetBalanceResponse.
        :type balance: float
        """
        if balance is None:
            raise ValueError("Invalid value for `balance`, must not be `None`")  # noqa: E501

        self._balance = balance

    @property
    def currency_code(self) -> str:
        """Gets the currency_code of this GetBalanceResponse.

        The currency code of the balance. Assumed to be msats if not provided.  # noqa: E501

        :return: The currency_code of this GetBalanceResponse.
        :rtype: str
        """
        return self._currency_code

    @currency_code.setter
    def currency_code(self, currency_code: str):
        """Sets the currency_code of this GetBalanceResponse.

        The currency code of the balance. Assumed to be msats if not provided.  # noqa: E501

        :param currency_code: The currency_code of this GetBalanceResponse.
        :type currency_code: str
        """

        self._currency_code = currency_code
