from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from umaauth.models.base_model import Model
from umaauth.models.currency_preference import CurrencyPreference
from umaauth import util

from umaauth.models.currency_preference import CurrencyPreference  # noqa: E501

class GetInfoResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, alias=None, color=None, pubkey=None, network=None, block_height=None, block_hash=None, methods=None, lud16=None, currencies=None):  # noqa: E501
        """GetInfoResponse - a model defined in OpenAPI

        :param alias: The alias of this GetInfoResponse.  # noqa: E501
        :type alias: str
        :param color: The color of this GetInfoResponse.  # noqa: E501
        :type color: str
        :param pubkey: The pubkey of this GetInfoResponse.  # noqa: E501
        :type pubkey: str
        :param network: The network of this GetInfoResponse.  # noqa: E501
        :type network: str
        :param block_height: The block_height of this GetInfoResponse.  # noqa: E501
        :type block_height: float
        :param block_hash: The block_hash of this GetInfoResponse.  # noqa: E501
        :type block_hash: str
        :param methods: The methods of this GetInfoResponse.  # noqa: E501
        :type methods: List[str]
        :param lud16: The lud16 of this GetInfoResponse.  # noqa: E501
        :type lud16: str
        :param currencies: The currencies of this GetInfoResponse.  # noqa: E501
        :type currencies: List[CurrencyPreference]
        """
        self.openapi_types = {
            'alias': str,
            'color': str,
            'pubkey': str,
            'network': str,
            'block_height': float,
            'block_hash': str,
            'methods': List[str],
            'lud16': str,
            'currencies': List[CurrencyPreference]
        }

        self.attribute_map = {
            'alias': 'alias',
            'color': 'color',
            'pubkey': 'pubkey',
            'network': 'network',
            'block_height': 'block_height',
            'block_hash': 'block_hash',
            'methods': 'methods',
            'lud16': 'lud16',
            'currencies': 'currencies'
        }

        self._alias = alias
        self._color = color
        self._pubkey = pubkey
        self._network = network
        self._block_height = block_height
        self._block_hash = block_hash
        self._methods = methods
        self._lud16 = lud16
        self._currencies = currencies

    @classmethod
    def from_dict(cls, dikt) -> 'GetInfoResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetInfoResponse of this GetInfoResponse.  # noqa: E501
        :rtype: GetInfoResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def alias(self) -> str:
        """Gets the alias of this GetInfoResponse.

        The alias of the user's node.  # noqa: E501

        :return: The alias of this GetInfoResponse.
        :rtype: str
        """
        return self._alias

    @alias.setter
    def alias(self, alias: str):
        """Sets the alias of this GetInfoResponse.

        The alias of the user's node.  # noqa: E501

        :param alias: The alias of this GetInfoResponse.
        :type alias: str
        """

        self._alias = alias

    @property
    def color(self) -> str:
        """Gets the color of this GetInfoResponse.

        The color of the user's node.  # noqa: E501

        :return: The color of this GetInfoResponse.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this GetInfoResponse.

        The color of the user's node.  # noqa: E501

        :param color: The color of this GetInfoResponse.
        :type color: str
        """

        self._color = color

    @property
    def pubkey(self) -> str:
        """Gets the pubkey of this GetInfoResponse.

        The pubkey of the user's node.  # noqa: E501

        :return: The pubkey of this GetInfoResponse.
        :rtype: str
        """
        return self._pubkey

    @pubkey.setter
    def pubkey(self, pubkey: str):
        """Sets the pubkey of this GetInfoResponse.

        The pubkey of the user's node.  # noqa: E501

        :param pubkey: The pubkey of this GetInfoResponse.
        :type pubkey: str
        """
        if pubkey is None:
            raise ValueError("Invalid value for `pubkey`, must not be `None`")  # noqa: E501

        self._pubkey = pubkey

    @property
    def network(self) -> str:
        """Gets the network of this GetInfoResponse.

        The bitcoin network of the user's node.  # noqa: E501

        :return: The network of this GetInfoResponse.
        :rtype: str
        """
        return self._network

    @network.setter
    def network(self, network: str):
        """Sets the network of this GetInfoResponse.

        The bitcoin network of the user's node.  # noqa: E501

        :param network: The network of this GetInfoResponse.
        :type network: str
        """
        allowed_values = ["regtest", "signet", "testnet", "mainnet"]  # noqa: E501
        if network not in allowed_values:
            raise ValueError(
                "Invalid value for `network` ({0}), must be one of {1}"
                .format(network, allowed_values)
            )

        self._network = network

    @property
    def block_height(self) -> float:
        """Gets the block_height of this GetInfoResponse.

        The current block height of the user's node.  # noqa: E501

        :return: The block_height of this GetInfoResponse.
        :rtype: float
        """
        return self._block_height

    @block_height.setter
    def block_height(self, block_height: float):
        """Sets the block_height of this GetInfoResponse.

        The current block height of the user's node.  # noqa: E501

        :param block_height: The block_height of this GetInfoResponse.
        :type block_height: float
        """

        self._block_height = block_height

    @property
    def block_hash(self) -> str:
        """Gets the block_hash of this GetInfoResponse.

        The current block hash of the user's node.  # noqa: E501

        :return: The block_hash of this GetInfoResponse.
        :rtype: str
        """
        return self._block_hash

    @block_hash.setter
    def block_hash(self, block_hash: str):
        """Sets the block_hash of this GetInfoResponse.

        The current block hash of the user's node.  # noqa: E501

        :param block_hash: The block_hash of this GetInfoResponse.
        :type block_hash: str
        """

        self._block_hash = block_hash

    @property
    def methods(self) -> List[str]:
        """Gets the methods of this GetInfoResponse.

        A list of supported methods for this connection.  # noqa: E501

        :return: The methods of this GetInfoResponse.
        :rtype: List[str]
        """
        return self._methods

    @methods.setter
    def methods(self, methods: List[str]):
        """Sets the methods of this GetInfoResponse.

        A list of supported methods for this connection.  # noqa: E501

        :param methods: The methods of this GetInfoResponse.
        :type methods: List[str]
        """
        if methods is None:
            raise ValueError("Invalid value for `methods`, must not be `None`")  # noqa: E501

        self._methods = methods

    @property
    def lud16(self) -> str:
        """Gets the lud16 of this GetInfoResponse.

        The lightning or UMA address for the user.  # noqa: E501

        :return: The lud16 of this GetInfoResponse.
        :rtype: str
        """
        return self._lud16

    @lud16.setter
    def lud16(self, lud16: str):
        """Sets the lud16 of this GetInfoResponse.

        The lightning or UMA address for the user.  # noqa: E501

        :param lud16: The lud16 of this GetInfoResponse.
        :type lud16: str
        """

        self._lud16 = lud16

    @property
    def currencies(self) -> List[CurrencyPreference]:
        """Gets the currencies of this GetInfoResponse.

        The currencies the user's wallet supports. Ordered by preference. If not provided, assume this user only supports BTC.  # noqa: E501

        :return: The currencies of this GetInfoResponse.
        :rtype: List[CurrencyPreference]
        """
        return self._currencies

    @currencies.setter
    def currencies(self, currencies: List[CurrencyPreference]):
        """Sets the currencies of this GetInfoResponse.

        The currencies the user's wallet supports. Ordered by preference. If not provided, assume this user only supports BTC.  # noqa: E501

        :param currencies: The currencies of this GetInfoResponse.
        :type currencies: List[CurrencyPreference]
        """

        self._currencies = currencies
