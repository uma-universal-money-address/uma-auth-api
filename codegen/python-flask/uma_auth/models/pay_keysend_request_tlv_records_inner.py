from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uma_auth.models.base_model import Model
from uma_auth import util


class PayKeysendRequestTlvRecordsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, value=None):  # noqa: E501
        """PayKeysendRequestTlvRecordsInner - a model defined in OpenAPI

        :param type: The type of this PayKeysendRequestTlvRecordsInner.  # noqa: E501
        :type type: int
        :param value: The value of this PayKeysendRequestTlvRecordsInner.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'type': int,
            'value': str
        }

        self.attribute_map = {
            'type': 'type',
            'value': 'value'
        }

        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'PayKeysendRequestTlvRecordsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PayKeysendRequest_tlv_records_inner of this PayKeysendRequestTlvRecordsInner.  # noqa: E501
        :rtype: PayKeysendRequestTlvRecordsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> int:
        """Gets the type of this PayKeysendRequestTlvRecordsInner.

        The tlv type  # noqa: E501

        :return: The type of this PayKeysendRequestTlvRecordsInner.
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type: int):
        """Sets the type of this PayKeysendRequestTlvRecordsInner.

        The tlv type  # noqa: E501

        :param type: The type of this PayKeysendRequestTlvRecordsInner.
        :type type: int
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def value(self) -> str:
        """Gets the value of this PayKeysendRequestTlvRecordsInner.

        The hex encoded tlv value.  # noqa: E501

        :return: The value of this PayKeysendRequestTlvRecordsInner.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this PayKeysendRequestTlvRecordsInner.

        The hex encoded tlv value.  # noqa: E501

        :param value: The value of this PayKeysendRequestTlvRecordsInner.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
