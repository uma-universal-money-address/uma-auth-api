from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uma_auth.models.base_model import Model
from uma_auth import util


class Currency(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code=None, symbol=None, name=None, decimals=None):  # noqa: E501
        """Currency - a model defined in OpenAPI

        :param code: The code of this Currency.  # noqa: E501
        :type code: str
        :param symbol: The symbol of this Currency.  # noqa: E501
        :type symbol: str
        :param name: The name of this Currency.  # noqa: E501
        :type name: str
        :param decimals: The decimals of this Currency.  # noqa: E501
        :type decimals: int
        """
        self.openapi_types = {
            'code': str,
            'symbol': str,
            'name': str,
            'decimals': int
        }

        self.attribute_map = {
            'code': 'code',
            'symbol': 'symbol',
            'name': 'name',
            'decimals': 'decimals'
        }

        self._code = code
        self._symbol = symbol
        self._name = name
        self._decimals = decimals

    @classmethod
    def from_dict(cls, dikt) -> 'Currency':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Currency of this Currency.  # noqa: E501
        :rtype: Currency
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> str:
        """Gets the code of this Currency.

        The ISO-4217 currency code.  # noqa: E501

        :return: The code of this Currency.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Currency.

        The ISO-4217 currency code.  # noqa: E501

        :param code: The code of this Currency.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def symbol(self) -> str:
        """Gets the symbol of this Currency.

        The currency symbol.  # noqa: E501

        :return: The symbol of this Currency.
        :rtype: str
        """
        return self._symbol

    @symbol.setter
    def symbol(self, symbol: str):
        """Sets the symbol of this Currency.

        The currency symbol.  # noqa: E501

        :param symbol: The symbol of this Currency.
        :type symbol: str
        """
        if symbol is None:
            raise ValueError("Invalid value for `symbol`, must not be `None`")  # noqa: E501

        self._symbol = symbol

    @property
    def name(self) -> str:
        """Gets the name of this Currency.

        The currency name.  # noqa: E501

        :return: The name of this Currency.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Currency.

        The currency name.  # noqa: E501

        :param name: The name of this Currency.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def decimals(self) -> int:
        """Gets the decimals of this Currency.

        Number of digits after the decimal point for display on the sender side, and to add clarity around what the \"smallest unit\" of the currency is. For example, in USD, by convention, there are 2 digits for cents - $5.95. In this case, `decimals` would be 2. Note that the multiplier is still always in the smallest unit (cents). In addition to display purposes, this field can be used to resolve ambiguity in what the multiplier means. For example, if the currency is \"BTC\" and the multiplier is 1000, really we're exchanging in SATs, so `decimals` would be 8.  # noqa: E501

        :return: The decimals of this Currency.
        :rtype: int
        """
        return self._decimals

    @decimals.setter
    def decimals(self, decimals: int):
        """Sets the decimals of this Currency.

        Number of digits after the decimal point for display on the sender side, and to add clarity around what the \"smallest unit\" of the currency is. For example, in USD, by convention, there are 2 digits for cents - $5.95. In this case, `decimals` would be 2. Note that the multiplier is still always in the smallest unit (cents). In addition to display purposes, this field can be used to resolve ambiguity in what the multiplier means. For example, if the currency is \"BTC\" and the multiplier is 1000, really we're exchanging in SATs, so `decimals` would be 8.  # noqa: E501

        :param decimals: The decimals of this Currency.
        :type decimals: int
        """
        if decimals is None:
            raise ValueError("Invalid value for `decimals`, must not be `None`")  # noqa: E501
        if decimals is not None and decimals < 0:  # noqa: E501
            raise ValueError("Invalid value for `decimals`, must be a value greater than or equal to `0`")  # noqa: E501

        self._decimals = decimals
