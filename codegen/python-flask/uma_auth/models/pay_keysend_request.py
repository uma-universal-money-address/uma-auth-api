from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uma_auth.models.base_model import Model
from uma_auth.models.pay_keysend_request_tlv_records_inner import PayKeysendRequestTlvRecordsInner
from uma_auth import util

from uma_auth.models.pay_keysend_request_tlv_records_inner import PayKeysendRequestTlvRecordsInner  # noqa: E501

class PayKeysendRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, amount=None, pubkey=None, preimage=None, tlv_records=None, budget_currency_code=None):  # noqa: E501
        """PayKeysendRequest - a model defined in OpenAPI

        :param amount: The amount of this PayKeysendRequest.  # noqa: E501
        :type amount: int
        :param pubkey: The pubkey of this PayKeysendRequest.  # noqa: E501
        :type pubkey: str
        :param preimage: The preimage of this PayKeysendRequest.  # noqa: E501
        :type preimage: str
        :param tlv_records: The tlv_records of this PayKeysendRequest.  # noqa: E501
        :type tlv_records: List[PayKeysendRequestTlvRecordsInner]
        :param budget_currency_code: The budget_currency_code of this PayKeysendRequest.  # noqa: E501
        :type budget_currency_code: str
        """
        self.openapi_types = {
            'amount': int,
            'pubkey': str,
            'preimage': str,
            'tlv_records': List[PayKeysendRequestTlvRecordsInner],
            'budget_currency_code': str
        }

        self.attribute_map = {
            'amount': 'amount',
            'pubkey': 'pubkey',
            'preimage': 'preimage',
            'tlv_records': 'tlv_records',
            'budget_currency_code': 'budget_currency_code'
        }

        self._amount = amount
        self._pubkey = pubkey
        self._preimage = preimage
        self._tlv_records = tlv_records
        self._budget_currency_code = budget_currency_code

    @classmethod
    def from_dict(cls, dikt) -> 'PayKeysendRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PayKeysendRequest of this PayKeysendRequest.  # noqa: E501
        :rtype: PayKeysendRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def amount(self) -> int:
        """Gets the amount of this PayKeysendRequest.

        The amount to pay in msats.  # noqa: E501

        :return: The amount of this PayKeysendRequest.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this PayKeysendRequest.

        The amount to pay in msats.  # noqa: E501

        :param amount: The amount of this PayKeysendRequest.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and amount <= 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than `0`")  # noqa: E501

        self._amount = amount

    @property
    def pubkey(self) -> str:
        """Gets the pubkey of this PayKeysendRequest.

        The public key of the receiver's node.  # noqa: E501

        :return: The pubkey of this PayKeysendRequest.
        :rtype: str
        """
        return self._pubkey

    @pubkey.setter
    def pubkey(self, pubkey: str):
        """Sets the pubkey of this PayKeysendRequest.

        The public key of the receiver's node.  # noqa: E501

        :param pubkey: The pubkey of this PayKeysendRequest.
        :type pubkey: str
        """
        if pubkey is None:
            raise ValueError("Invalid value for `pubkey`, must not be `None`")  # noqa: E501

        self._pubkey = pubkey

    @property
    def preimage(self) -> str:
        """Gets the preimage of this PayKeysendRequest.

        Preimage of the payment.  # noqa: E501

        :return: The preimage of this PayKeysendRequest.
        :rtype: str
        """
        return self._preimage

    @preimage.setter
    def preimage(self, preimage: str):
        """Sets the preimage of this PayKeysendRequest.

        Preimage of the payment.  # noqa: E501

        :param preimage: The preimage of this PayKeysendRequest.
        :type preimage: str
        """

        self._preimage = preimage

    @property
    def tlv_records(self) -> List[PayKeysendRequestTlvRecordsInner]:
        """Gets the tlv_records of this PayKeysendRequest.

        The tlv records.  # noqa: E501

        :return: The tlv_records of this PayKeysendRequest.
        :rtype: List[PayKeysendRequestTlvRecordsInner]
        """
        return self._tlv_records

    @tlv_records.setter
    def tlv_records(self, tlv_records: List[PayKeysendRequestTlvRecordsInner]):
        """Sets the tlv_records of this PayKeysendRequest.

        The tlv records.  # noqa: E501

        :param tlv_records: The tlv_records of this PayKeysendRequest.
        :type tlv_records: List[PayKeysendRequestTlvRecordsInner]
        """

        self._tlv_records = tlv_records

    @property
    def budget_currency_code(self) -> str:
        """Gets the budget_currency_code of this PayKeysendRequest.

        The code of the currency the sender used to set budget.  Optional if the budget is set to SAT.  # noqa: E501

        :return: The budget_currency_code of this PayKeysendRequest.
        :rtype: str
        """
        return self._budget_currency_code

    @budget_currency_code.setter
    def budget_currency_code(self, budget_currency_code: str):
        """Sets the budget_currency_code of this PayKeysendRequest.

        The code of the currency the sender used to set budget.  Optional if the budget is set to SAT.  # noqa: E501

        :param budget_currency_code: The budget_currency_code of this PayKeysendRequest.
        :type budget_currency_code: str
        """

        self._budget_currency_code = budget_currency_code
