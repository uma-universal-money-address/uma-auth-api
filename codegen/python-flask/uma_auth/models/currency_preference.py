from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uma_auth.models.base_model import Model
from uma_auth.models.currency import Currency
from uma_auth import util

from uma_auth.models.currency import Currency  # noqa: E501

class CurrencyPreference(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, currency=None, multiplier=None, min=None, max=None):  # noqa: E501
        """CurrencyPreference - a model defined in OpenAPI

        :param currency: The currency of this CurrencyPreference.  # noqa: E501
        :type currency: Currency
        :param multiplier: The multiplier of this CurrencyPreference.  # noqa: E501
        :type multiplier: float
        :param min: The min of this CurrencyPreference.  # noqa: E501
        :type min: int
        :param max: The max of this CurrencyPreference.  # noqa: E501
        :type max: int
        """
        self.openapi_types = {
            'currency': Currency,
            'multiplier': float,
            'min': int,
            'max': int
        }

        self.attribute_map = {
            'currency': 'currency',
            'multiplier': 'multiplier',
            'min': 'min',
            'max': 'max'
        }

        self._currency = currency
        self._multiplier = multiplier
        self._min = min
        self._max = max

    @classmethod
    def from_dict(cls, dikt) -> 'CurrencyPreference':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CurrencyPreference of this CurrencyPreference.  # noqa: E501
        :rtype: CurrencyPreference
        """
        return util.deserialize_model(dikt, cls)

    @property
    def currency(self) -> Currency:
        """Gets the currency of this CurrencyPreference.


        :return: The currency of this CurrencyPreference.
        :rtype: Currency
        """
        return self._currency

    @currency.setter
    def currency(self, currency: Currency):
        """Sets the currency of this CurrencyPreference.


        :param currency: The currency of this CurrencyPreference.
        :type currency: Currency
        """

        self._currency = currency

    @property
    def multiplier(self) -> float:
        """Gets the multiplier of this CurrencyPreference.

        Estimated number of milli-sats per smallest unit of this currency (eg. cents) If base_sending_currency_code was specified, this is the rate relative to that currency instead of milli-sats.  # noqa: E501

        :return: The multiplier of this CurrencyPreference.
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier: float):
        """Sets the multiplier of this CurrencyPreference.

        Estimated number of milli-sats per smallest unit of this currency (eg. cents) If base_sending_currency_code was specified, this is the rate relative to that currency instead of milli-sats.  # noqa: E501

        :param multiplier: The multiplier of this CurrencyPreference.
        :type multiplier: float
        """
        if multiplier is None:
            raise ValueError("Invalid value for `multiplier`, must not be `None`")  # noqa: E501
        if multiplier is not None and multiplier <= 0:  # noqa: E501
            raise ValueError("Invalid value for `multiplier`, must be a value greater than `0`")  # noqa: E501

        self._multiplier = multiplier

    @property
    def min(self) -> int:
        """Gets the min of this CurrencyPreference.

        The minimum amount that can be received in this currency.  # noqa: E501

        :return: The min of this CurrencyPreference.
        :rtype: int
        """
        return self._min

    @min.setter
    def min(self, min: int):
        """Sets the min of this CurrencyPreference.

        The minimum amount that can be received in this currency.  # noqa: E501

        :param min: The min of this CurrencyPreference.
        :type min: int
        """
        if min is None:
            raise ValueError("Invalid value for `min`, must not be `None`")  # noqa: E501
        if min is not None and min <= 0:  # noqa: E501
            raise ValueError("Invalid value for `min`, must be a value greater than `0`")  # noqa: E501

        self._min = min

    @property
    def max(self) -> int:
        """Gets the max of this CurrencyPreference.

        The maximum amount that can be received in this currency.  # noqa: E501

        :return: The max of this CurrencyPreference.
        :rtype: int
        """
        return self._max

    @max.setter
    def max(self, max: int):
        """Sets the max of this CurrencyPreference.

        The maximum amount that can be received in this currency.  # noqa: E501

        :param max: The max of this CurrencyPreference.
        :type max: int
        """
        if max is None:
            raise ValueError("Invalid value for `max`, must not be `None`")  # noqa: E501
        if max is not None and max <= 0:  # noqa: E501
            raise ValueError("Invalid value for `max`, must be a value greater than `0`")  # noqa: E501

        self._max = max
