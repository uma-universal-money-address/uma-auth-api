from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uma_auth.models.base_model import Model
from uma_auth.models.transaction_type import TransactionType
from uma_auth import util

from uma_auth.models.transaction_type import TransactionType  # noqa: E501

class Transaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, invoice=None, description=None, description_hash=None, preimage=None, payment_hash=None, amount=None, fees_paid=None, created_at=None, expires_at=None, metadata=None):  # noqa: E501
        """Transaction - a model defined in OpenAPI

        :param type: The type of this Transaction.  # noqa: E501
        :type type: TransactionType
        :param invoice: The invoice of this Transaction.  # noqa: E501
        :type invoice: str
        :param description: The description of this Transaction.  # noqa: E501
        :type description: str
        :param description_hash: The description_hash of this Transaction.  # noqa: E501
        :type description_hash: str
        :param preimage: The preimage of this Transaction.  # noqa: E501
        :type preimage: str
        :param payment_hash: The payment_hash of this Transaction.  # noqa: E501
        :type payment_hash: str
        :param amount: The amount of this Transaction.  # noqa: E501
        :type amount: int
        :param fees_paid: The fees_paid of this Transaction.  # noqa: E501
        :type fees_paid: int
        :param created_at: The created_at of this Transaction.  # noqa: E501
        :type created_at: int
        :param expires_at: The expires_at of this Transaction.  # noqa: E501
        :type expires_at: int
        :param metadata: The metadata of this Transaction.  # noqa: E501
        :type metadata: object
        """
        self.openapi_types = {
            'type': TransactionType,
            'invoice': str,
            'description': str,
            'description_hash': str,
            'preimage': str,
            'payment_hash': str,
            'amount': int,
            'fees_paid': int,
            'created_at': int,
            'expires_at': int,
            'metadata': object
        }

        self.attribute_map = {
            'type': 'type',
            'invoice': 'invoice',
            'description': 'description',
            'description_hash': 'description_hash',
            'preimage': 'preimage',
            'payment_hash': 'payment_hash',
            'amount': 'amount',
            'fees_paid': 'fees_paid',
            'created_at': 'created_at',
            'expires_at': 'expires_at',
            'metadata': 'metadata'
        }

        self._type = type
        self._invoice = invoice
        self._description = description
        self._description_hash = description_hash
        self._preimage = preimage
        self._payment_hash = payment_hash
        self._amount = amount
        self._fees_paid = fees_paid
        self._created_at = created_at
        self._expires_at = expires_at
        self._metadata = metadata

    @classmethod
    def from_dict(cls, dikt) -> 'Transaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transaction of this Transaction.  # noqa: E501
        :rtype: Transaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> TransactionType:
        """Gets the type of this Transaction.


        :return: The type of this Transaction.
        :rtype: TransactionType
        """
        return self._type

    @type.setter
    def type(self, type: TransactionType):
        """Sets the type of this Transaction.


        :param type: The type of this Transaction.
        :type type: TransactionType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def invoice(self) -> str:
        """Gets the invoice of this Transaction.

        The full, encoded invoice.  # noqa: E501

        :return: The invoice of this Transaction.
        :rtype: str
        """
        return self._invoice

    @invoice.setter
    def invoice(self, invoice: str):
        """Sets the invoice of this Transaction.

        The full, encoded invoice.  # noqa: E501

        :param invoice: The invoice of this Transaction.
        :type invoice: str
        """

        self._invoice = invoice

    @property
    def description(self) -> str:
        """Gets the description of this Transaction.

        The invoice's description.  # noqa: E501

        :return: The description of this Transaction.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Transaction.

        The invoice's description.  # noqa: E501

        :param description: The description of this Transaction.
        :type description: str
        """

        self._description = description

    @property
    def description_hash(self) -> str:
        """Gets the description_hash of this Transaction.

        The invoice's description hash.  # noqa: E501

        :return: The description_hash of this Transaction.
        :rtype: str
        """
        return self._description_hash

    @description_hash.setter
    def description_hash(self, description_hash: str):
        """Sets the description_hash of this Transaction.

        The invoice's description hash.  # noqa: E501

        :param description_hash: The description_hash of this Transaction.
        :type description_hash: str
        """

        self._description_hash = description_hash

    @property
    def preimage(self) -> str:
        """Gets the preimage of this Transaction.

        The payment preimage, optional if unpaid.  # noqa: E501

        :return: The preimage of this Transaction.
        :rtype: str
        """
        return self._preimage

    @preimage.setter
    def preimage(self, preimage: str):
        """Sets the preimage of this Transaction.

        The payment preimage, optional if unpaid.  # noqa: E501

        :param preimage: The preimage of this Transaction.
        :type preimage: str
        """

        self._preimage = preimage

    @property
    def payment_hash(self) -> str:
        """Gets the payment_hash of this Transaction.

        Payment hash for the payment  # noqa: E501

        :return: The payment_hash of this Transaction.
        :rtype: str
        """
        return self._payment_hash

    @payment_hash.setter
    def payment_hash(self, payment_hash: str):
        """Sets the payment_hash of this Transaction.

        Payment hash for the payment  # noqa: E501

        :param payment_hash: The payment_hash of this Transaction.
        :type payment_hash: str
        """
        if payment_hash is None:
            raise ValueError("Invalid value for `payment_hash`, must not be `None`")  # noqa: E501

        self._payment_hash = payment_hash

    @property
    def amount(self) -> int:
        """Gets the amount of this Transaction.

        Value in msats.  # noqa: E501

        :return: The amount of this Transaction.
        :rtype: int
        """
        return self._amount

    @amount.setter
    def amount(self, amount: int):
        """Sets the amount of this Transaction.

        Value in msats.  # noqa: E501

        :param amount: The amount of this Transaction.
        :type amount: int
        """
        if amount is None:
            raise ValueError("Invalid value for `amount`, must not be `None`")  # noqa: E501
        if amount is not None and amount <= 0:  # noqa: E501
            raise ValueError("Invalid value for `amount`, must be a value greater than `0`")  # noqa: E501

        self._amount = amount

    @property
    def fees_paid(self) -> int:
        """Gets the fees_paid of this Transaction.

        Value in msats.  # noqa: E501

        :return: The fees_paid of this Transaction.
        :rtype: int
        """
        return self._fees_paid

    @fees_paid.setter
    def fees_paid(self, fees_paid: int):
        """Sets the fees_paid of this Transaction.

        Value in msats.  # noqa: E501

        :param fees_paid: The fees_paid of this Transaction.
        :type fees_paid: int
        """
        if fees_paid is not None and fees_paid < 0:  # noqa: E501
            raise ValueError("Invalid value for `fees_paid`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fees_paid = fees_paid

    @property
    def created_at(self) -> int:
        """Gets the created_at of this Transaction.

        The time the payment/invoice was created.  # noqa: E501

        :return: The created_at of this Transaction.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: int):
        """Sets the created_at of this Transaction.

        The time the payment/invoice was created.  # noqa: E501

        :param created_at: The created_at of this Transaction.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def expires_at(self) -> int:
        """Gets the expires_at of this Transaction.

        The time the invoice expires.  # noqa: E501

        :return: The expires_at of this Transaction.
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: int):
        """Sets the expires_at of this Transaction.

        The time the invoice expires.  # noqa: E501

        :param expires_at: The expires_at of this Transaction.
        :type expires_at: int
        """

        self._expires_at = expires_at

    @property
    def metadata(self) -> object:
        """Gets the metadata of this Transaction.

        Additional metadata attached to the invoice.  # noqa: E501

        :return: The metadata of this Transaction.
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: object):
        """Sets the metadata of this Transaction.

        Additional metadata attached to the invoice.  # noqa: E501

        :param metadata: The metadata of this Transaction.
        :type metadata: object
        """

        self._metadata = metadata
