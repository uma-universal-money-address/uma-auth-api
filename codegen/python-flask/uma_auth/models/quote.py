from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uma_auth.models.base_model import Model
from uma_auth.models.currency import Currency
from uma_auth import util

from uma_auth.models.currency import Currency  # noqa: E501

class Quote(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, sending_currency=None, receiving_currency=None, payment_hash=None, expires_at=None, multiplier=None, fees=None, total_sending_amount=None, total_receiving_amount=None, created_at=None):  # noqa: E501
        """Quote - a model defined in OpenAPI

        :param sending_currency: The sending_currency of this Quote.  # noqa: E501
        :type sending_currency: Currency
        :param receiving_currency: The receiving_currency of this Quote.  # noqa: E501
        :type receiving_currency: Currency
        :param payment_hash: The payment_hash of this Quote.  # noqa: E501
        :type payment_hash: str
        :param expires_at: The expires_at of this Quote.  # noqa: E501
        :type expires_at: int
        :param multiplier: The multiplier of this Quote.  # noqa: E501
        :type multiplier: float
        :param fees: The fees of this Quote.  # noqa: E501
        :type fees: int
        :param total_sending_amount: The total_sending_amount of this Quote.  # noqa: E501
        :type total_sending_amount: int
        :param total_receiving_amount: The total_receiving_amount of this Quote.  # noqa: E501
        :type total_receiving_amount: int
        :param created_at: The created_at of this Quote.  # noqa: E501
        :type created_at: int
        """
        self.openapi_types = {
            'sending_currency': Currency,
            'receiving_currency': Currency,
            'payment_hash': str,
            'expires_at': int,
            'multiplier': float,
            'fees': int,
            'total_sending_amount': int,
            'total_receiving_amount': int,
            'created_at': int
        }

        self.attribute_map = {
            'sending_currency': 'sending_currency',
            'receiving_currency': 'receiving_currency',
            'payment_hash': 'payment_hash',
            'expires_at': 'expires_at',
            'multiplier': 'multiplier',
            'fees': 'fees',
            'total_sending_amount': 'total_sending_amount',
            'total_receiving_amount': 'total_receiving_amount',
            'created_at': 'created_at'
        }

        self._sending_currency = sending_currency
        self._receiving_currency = receiving_currency
        self._payment_hash = payment_hash
        self._expires_at = expires_at
        self._multiplier = multiplier
        self._fees = fees
        self._total_sending_amount = total_sending_amount
        self._total_receiving_amount = total_receiving_amount
        self._created_at = created_at

    @classmethod
    def from_dict(cls, dikt) -> 'Quote':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Quote of this Quote.  # noqa: E501
        :rtype: Quote
        """
        return util.deserialize_model(dikt, cls)

    @property
    def sending_currency(self) -> Currency:
        """Gets the sending_currency of this Quote.


        :return: The sending_currency of this Quote.
        :rtype: Currency
        """
        return self._sending_currency

    @sending_currency.setter
    def sending_currency(self, sending_currency: Currency):
        """Sets the sending_currency of this Quote.


        :param sending_currency: The sending_currency of this Quote.
        :type sending_currency: Currency
        """
        if sending_currency is None:
            raise ValueError("Invalid value for `sending_currency`, must not be `None`")  # noqa: E501

        self._sending_currency = sending_currency

    @property
    def receiving_currency(self) -> Currency:
        """Gets the receiving_currency of this Quote.


        :return: The receiving_currency of this Quote.
        :rtype: Currency
        """
        return self._receiving_currency

    @receiving_currency.setter
    def receiving_currency(self, receiving_currency: Currency):
        """Sets the receiving_currency of this Quote.


        :param receiving_currency: The receiving_currency of this Quote.
        :type receiving_currency: Currency
        """
        if receiving_currency is None:
            raise ValueError("Invalid value for `receiving_currency`, must not be `None`")  # noqa: E501

        self._receiving_currency = receiving_currency

    @property
    def payment_hash(self) -> str:
        """Gets the payment_hash of this Quote.

        The payment hash of the quote. Used as an identifier to execute the quote.  # noqa: E501

        :return: The payment_hash of this Quote.
        :rtype: str
        """
        return self._payment_hash

    @payment_hash.setter
    def payment_hash(self, payment_hash: str):
        """Sets the payment_hash of this Quote.

        The payment hash of the quote. Used as an identifier to execute the quote.  # noqa: E501

        :param payment_hash: The payment_hash of this Quote.
        :type payment_hash: str
        """
        if payment_hash is None:
            raise ValueError("Invalid value for `payment_hash`, must not be `None`")  # noqa: E501

        self._payment_hash = payment_hash

    @property
    def expires_at(self) -> int:
        """Gets the expires_at of this Quote.

        The time the quote expires in unix timestamp.  # noqa: E501

        :return: The expires_at of this Quote.
        :rtype: int
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: int):
        """Sets the expires_at of this Quote.

        The time the quote expires in unix timestamp.  # noqa: E501

        :param expires_at: The expires_at of this Quote.
        :type expires_at: int
        """
        if expires_at is None:
            raise ValueError("Invalid value for `expires_at`, must not be `None`")  # noqa: E501

        self._expires_at = expires_at

    @property
    def multiplier(self) -> float:
        """Gets the multiplier of this Quote.

        Number of sending currency units per receiving currency unit.  # noqa: E501

        :return: The multiplier of this Quote.
        :rtype: float
        """
        return self._multiplier

    @multiplier.setter
    def multiplier(self, multiplier: float):
        """Sets the multiplier of this Quote.

        Number of sending currency units per receiving currency unit.  # noqa: E501

        :param multiplier: The multiplier of this Quote.
        :type multiplier: float
        """
        if multiplier is None:
            raise ValueError("Invalid value for `multiplier`, must not be `None`")  # noqa: E501
        if multiplier is not None and multiplier <= 0:  # noqa: E501
            raise ValueError("Invalid value for `multiplier`, must be a value greater than `0`")  # noqa: E501

        self._multiplier = multiplier

    @property
    def fees(self) -> int:
        """Gets the fees of this Quote.

        The fees associated with the quote in the smallest unit of the sending currency (eg. cents).  # noqa: E501

        :return: The fees of this Quote.
        :rtype: int
        """
        return self._fees

    @fees.setter
    def fees(self, fees: int):
        """Sets the fees of this Quote.

        The fees associated with the quote in the smallest unit of the sending currency (eg. cents).  # noqa: E501

        :param fees: The fees of this Quote.
        :type fees: int
        """
        if fees is None:
            raise ValueError("Invalid value for `fees`, must not be `None`")  # noqa: E501
        if fees is not None and fees < 0:  # noqa: E501
            raise ValueError("Invalid value for `fees`, must be a value greater than or equal to `0`")  # noqa: E501

        self._fees = fees

    @property
    def total_sending_amount(self) -> int:
        """Gets the total_sending_amount of this Quote.

        The total amount that will be sent in the smallest unit of the sending currency (eg. cents).  # noqa: E501

        :return: The total_sending_amount of this Quote.
        :rtype: int
        """
        return self._total_sending_amount

    @total_sending_amount.setter
    def total_sending_amount(self, total_sending_amount: int):
        """Sets the total_sending_amount of this Quote.

        The total amount that will be sent in the smallest unit of the sending currency (eg. cents).  # noqa: E501

        :param total_sending_amount: The total_sending_amount of this Quote.
        :type total_sending_amount: int
        """
        if total_sending_amount is None:
            raise ValueError("Invalid value for `total_sending_amount`, must not be `None`")  # noqa: E501
        if total_sending_amount is not None and total_sending_amount <= 0:  # noqa: E501
            raise ValueError("Invalid value for `total_sending_amount`, must be a value greater than `0`")  # noqa: E501

        self._total_sending_amount = total_sending_amount

    @property
    def total_receiving_amount(self) -> int:
        """Gets the total_receiving_amount of this Quote.

        The total amount that will be received in the smallest unit of the receiving currency (eg. cents).  # noqa: E501

        :return: The total_receiving_amount of this Quote.
        :rtype: int
        """
        return self._total_receiving_amount

    @total_receiving_amount.setter
    def total_receiving_amount(self, total_receiving_amount: int):
        """Sets the total_receiving_amount of this Quote.

        The total amount that will be received in the smallest unit of the receiving currency (eg. cents).  # noqa: E501

        :param total_receiving_amount: The total_receiving_amount of this Quote.
        :type total_receiving_amount: int
        """
        if total_receiving_amount is None:
            raise ValueError("Invalid value for `total_receiving_amount`, must not be `None`")  # noqa: E501
        if total_receiving_amount is not None and total_receiving_amount <= 0:  # noqa: E501
            raise ValueError("Invalid value for `total_receiving_amount`, must be a value greater than `0`")  # noqa: E501

        self._total_receiving_amount = total_receiving_amount

    @property
    def created_at(self) -> int:
        """Gets the created_at of this Quote.

        The time the quote was created in unix timestamp.  # noqa: E501

        :return: The created_at of this Quote.
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: int):
        """Sets the created_at of this Quote.

        The time the quote was created in unix timestamp.  # noqa: E501

        :param created_at: The created_at of this Quote.
        :type created_at: int
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at
