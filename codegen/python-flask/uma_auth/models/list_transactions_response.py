from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from uma_auth.models.base_model import Model
from uma_auth.models.transaction import Transaction
from uma_auth import util

from uma_auth.models.transaction import Transaction  # noqa: E501

class ListTransactionsResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, transactions=None):  # noqa: E501
        """ListTransactionsResponse - a model defined in OpenAPI

        :param transactions: The transactions of this ListTransactionsResponse.  # noqa: E501
        :type transactions: List[Transaction]
        """
        self.openapi_types = {
            'transactions': List[Transaction]
        }

        self.attribute_map = {
            'transactions': 'transactions'
        }

        self._transactions = transactions

    @classmethod
    def from_dict(cls, dikt) -> 'ListTransactionsResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ListTransactionsResponse of this ListTransactionsResponse.  # noqa: E501
        :rtype: ListTransactionsResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def transactions(self) -> List[Transaction]:
        """Gets the transactions of this ListTransactionsResponse.

        A list of transactions including invoices and payments.  # noqa: E501

        :return: The transactions of this ListTransactionsResponse.
        :rtype: List[Transaction]
        """
        return self._transactions

    @transactions.setter
    def transactions(self, transactions: List[Transaction]):
        """Sets the transactions of this ListTransactionsResponse.

        A list of transactions including invoices and payments.  # noqa: E501

        :param transactions: The transactions of this ListTransactionsResponse.
        :type transactions: List[Transaction]
        """
        if transactions is None:
            raise ValueError("Invalid value for `transactions`, must not be `None`")  # noqa: E501

        self._transactions = transactions
